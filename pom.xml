<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>io.opns.otl</groupId>
    <artifactId>opentracing-lite</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>
    
    <name>opentracing-lite</name>
    <!--name>${project.groupId}:${project.artifactId}</name-->
    <description>A simple light-weight opentracing framework implementation</description>
    <url>https://github.com/sudiptasish/opentracing-lite</url>
    
    <!-- Declaring the license(s) used for distributing OTL components -->
    <licenses>
        <license>
          <name>The Apache License, Version 2.0</name>
          <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>
    
    <developers>
        <developer>
            <name>Sudiptasish Chanda</name>
            <email>sudiptasish@gmail.com</email>
            <organization>None</organization>
            <organizationUrl>https://github.com/sudiptasish</organizationUrl>
        </developer>
    </developers>
    
    <scm>
        <connection>scm:git:git://github.com/sudiptasish/opentracing-lite.git</connection>
        <developerConnection>scm:git:ssh://github.com/sudiptasish/opentracing-lite.git</developerConnection>
        <url>https://github.com/sudiptasish/opentracing-lite/tree/master</url>
    </scm>
    
    <!--
    If you are using the Maven deploy plugin, which is the default behavior, you
    need to add a full distributionManagement section.
    This configurations will get the user account details to deploy to OSSRH from
    the Maven settings.xml file
    
    In github, the settings.xml file will be overriden and a new file will be created
    under the current workspace directory, after taking the username and password
    from the secrets.
    
    The id element in the server element in settings.xml should be identical to the
    id elements in the snapshotRepository and repository element as well as the 
    serverId configuration of the Nexus Staging Maven plugin
    -->
    <distributionManagement>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>
    
    <modules>
        <module>otl-agent</module>
        <module>otl-jax-rs</module>
        <module>otl-kafka</module>
        <module>otl-metrics</module>
        <module>otl-slf4j</module>
        <module>otl-spring-boot</module>
        <module>otl-spring-web</module>
        <module>otl-util</module>
        <module>otl-vertx</module>
        <module>otl-web</module>
        <module>otl-integ</module>
        <module>otl-api</module>
    </modules>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.6.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <!-- 
            The Nexus Staging Maven Plugin is the recommended way to deploy
            your components to OSSRH and release them to the Central Repository.
            
            If your version is a release version (does not end in -SNAPSHOT) and
            with this setup in place, you can run a deployment to OSSRH and an 
            automated release to the Central Repository with the usual:
            
            mvn clean deploy
            
            If the property autoReleaseAfterClose set to false you can manually 
            inspect the staging repository in the Nexus Repository Manager and
            trigger a release of the staging repository later with:
            
            mvn nexus-staging:release
            
            If something goes wrong you can drop the staging repository with:
            
            mvn nexus-staging:drop
            -->
            <plugin>
                <groupId>org.sonatype.plugins</groupId>
                <artifactId>nexus-staging-maven-plugin</artifactId>
                <version>1.6.8</version>
                <extensions>true</extensions>
                <configuration>
                    <serverId>ossrh</serverId>
                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                    <autoReleaseAfterClose>true</autoReleaseAfterClose>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <useReleaseProfile>false</useReleaseProfile>
                    <releaseProfiles>release</releaseProfiles>
                    <goals>deploy</goals>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <version>1.6</version>
                <executions>
                    <execution>
                        <id>sign-artifacts</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>sign</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
